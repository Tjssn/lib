% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Main_Super_param.R
\name{super_param}
\alias{super_param}
\title{数据变量综合处理与信息管理工具}
\usage{
super_param(
  data,
  type_conv = NULL,
  factor_levels = NULL,
  drop_cols = NULL,
  key_vars = NULL,
  rename = NULL,
  rename_safe = c("unicode_name", "normal_name", "original_name", "label"),
  relabel = NULL,
  add_mark = NULL,
  dynamic_sort = T,
  max_level = 5,
  max_level_pos = 30
)
}
\arguments{
\item{data}{数据框(data.frame)，必填参数。待处理的原始数据集，包含需要进行清洗和转换的所有变量。}

\item{type_conv}{命名向量，可选参数。用于指定变量类型转换规则，格式为\code{c("最终变量名"="目标类型")}。
支持的目标类型包括："numeric"、"integer"、"factor"、"ordered"、"Date"、"character"、"logical"。
若指定的变量不存在，将在日志中提示警告，字符强行转化为因子或数值变量会根据字符的unicode编码对水平进行排序并从1开始计数因子水平。}

\item{factor_levels}{列表，可选参数。用于自定义因子变量的水平设置，格式为\code{list("最终变量名"=list(levels=, labels=, ordered=))}。
其中levels为必须项（指定水平顺序），labels（水平标签）和ordered（是否有序）为可选项，
未指定时默认labels=levels，ordered=FALSE。
\strong{"Tj_to_factor_list2"可将相关数据文件转化为可输入的列表，具体见help(Tj_to_factor_list2)}
\strong{"fast_factor_same"可快速声明多个相同因子赋值的变量，具体见help(fast_factor_same)}}

\item{drop_cols}{字符向量，可选参数。指定需要从数据中删除的变量名称（基于最终变量名），
格式为\code{c("最终变量名1", "最终变量名2")}。删除操作在类型转换和因子设置之后执行。}

\item{key_vars}{字符向量，可选参数。标记为关键变量的名称（基于\code{最终变量名}），在动态排序中
关键变量将优先展示在结果的最前面，此外可排除你研究中的关键变量但并不用于本次分析的变量。}

\item{rename}{命名向量，可选参数。用于自定义变量重命名规则，格式为\code{c("旧最终变量名"="新最终变量名")}。
该操作将覆盖由rename_safe参数设置的初始最终变量名，重命名失败的变量会在日志中提示。}

\item{rename_safe}{字符向量，可选参数。指定最终变量名的初始格式，决定变量名的基础样式，各可选值及处理规则如下：
"normal_name"：保留中文及合法字符（a-zA-Z0-9_），将所有非法符号（如空格、标点、特殊字符等）转换为下划线；若多个非法符号相邻，仅保留一个下划线；最终变量名通过\code{make.unique}确保唯一性。
"unicode_name"：将中文及所有非法字符转换为Unicode编码（格式为"u+十六进制值"），仅保留a-zA-Z0-9_等合法字符；最终变量名通过\code{make.unique}确保唯一性，适合需跨系统兼容的场景。
"original_name"：完全保留原始变量名，不做任何转换；若包含非法符号（如空格、特殊字符等），可能导致后续模型运行时自动重命名或报错。
"label"：使用变量的标签（label）作为初始变量名，若标签不存在则默认使用原始变量名。
默认值为\code{c("unicode_name", "normal_name", "original_name", "label")}，\strong{建议优先使用"normal_name"}，兼顾可读性与兼容性。}

\item{relabel}{命名向量，可选参数。用于修改变量的标签信息，格式为\code{c("最终变量名"="新label")}。
标签主要用于变量信息表中的展示，不影响变量实际名称和数据处理。}

\item{add_mark}{基于tidy语法，可灵活删改Viewer$table，可选参数。用于在变量信息汇总表中添加自定义标记列，
格式为\verb{list(<your variable1>=list("condition1"),<your variable2>=list("condition2"))}，其中condition支持tidy的mutate语法。}

\item{dynamic_sort}{逻辑型，可选参数。是否启用变量动态排序功能。若为TRUE（默认），
变量顺序为"关键变量 > 经过修改的变量 > 其他变量"；若为FALSE，保持原始变量顺序。}

\item{max_level}{整数，可选参数。控制变量值展示的最大水平数量，超过该数量时仅显示前N个水平
并提示总数，默认值为5。}

\item{max_level_pos}{整数，可选参数。控制变量值展示的最大字符长度，超过该长度将截断并添加"..."，
默认值为30。}
}
\value{
列表，包含以下核心组件：
\code{data}: 处理后的标准化数据集，变量按指定顺序排列；
\code{label_mapping}: 变量名映射表，包含original_name、normal_name、unicode_name、label等信息；
\code{var_info}: 变量信息列表，包括统计信息（总观测数、缺失值数量等）和类型信息（基础类型、继承类型等）；
\code{Viewer}: 包含格式化的变量信息汇总表，展示变量的各类属性和统计特征；
\code{cleaning_log}: 清洗过程的详细日志，记录每一步操作的结果和警告信息；
\code{stats}: 数据处理前后的统计对比，包括样本量、变量数、删除变量数等。
}
\description{
对输入数据框进行变量处理与管理，包括变量重命名、类型转换、因子水平设置、
变量筛选、标签管理等，并生成详细的变量信息汇总表和清洗日志，为后续数据分析提供标准化数据集。
支持动态可视化，可通过Viewer实时查看处理结果，方便数据质量评估与预处理流程追溯。
}
\details{
变量处理优先级：重命名(rename) > 类型转换(type_conv) > 因子设置(factor_levels) > 变量删除(drop_cols)；\cr
变量名生成逻辑：先根据rename_safe生成初始最终变量名，再通过rename参数进行自定义修改；\cr
动态排序规则：关键变量(rename)优先，其次是经过修改的变量（类型转换、因子设置、重命名等），
最后是未修改的普通变量；\cr
日志信息包含：各步骤操作结果、警告信息、错误原因等，便于追踪处理过程和排查问题。
}
\note{
建议在处理大型数据集前先进行测试，以评估函数性能；\cr
变量名若包含特殊字符，会被自动转换为安全格式，转换规则可通过rename_safe参数控制；\cr
因子水平设置时，请确保levels参数包含所有可能的值，否则会产生NA值；\cr
类型转换可能导致数据丢失（如字符型转数值型时的非数字值），请在日志中确认转换成功率。
}
\section{重要提示}{

\strong{⚠️} 函数执行过程会生成详细的清洗日志，记录变量处理的每一步操作、转换结果及潜在问题，
建议仔细查看日志信息以确保数据处理符合预期。变量重命名和类型转换操作具有优先级顺序，
请留意参数间的相互影响。
}

\examples{
# 准备工作：加载数据和包
rm(list = ls()); gc()
library(Tjpackages)
data("df")  # 假设df为待处理的原始数据集

# 示例1：初次使用，查看原始数据概况， 若要使用外部Super_single的excel批量处理 请翻到案例最后
dat.param1 <- super_param(data = df)
# 查看处理后的数据和变量信息表
head(dat.param1$data)
dat.param1$Viewer$table

# 示例2：指定变量名规则（推荐使用"normal"平衡可读性和兼容性）
dat.param2 <- super_param(
  data = df,
  rename_safe = "normal"  # 生成保留中文和合法字符的变量名
)

# 示例3：自定义重命名与标记关键变量
dat.param3 <- super_param(
  data = df,
  rename_safe = "normal",
  key_vars = "ID",  # 标记ID为关键变量，优先展示
  rename = c(yaxing = "yx", Age = "年龄", var9 = "Alb")  # 自定义重命名规则
)

# 示例4：为变量添加标签（提升展示可读性）
dat.param4 <- super_param(
  data = df,
  rename_safe = "normal",
  key_vars = "ID",
  rename = c(yaxing = "yx", Age = "年龄", var9 = "Alb"),
  relabel = c(yx = "亚型")  # 为变量yx添加标签"亚型"
)

# 示例5：设置因子变量的水平与标签
dat.param5 <- super_param(
  data = df,
  rename_safe = "normal",
  key_vars = "ID",
  rename = c(yaxing = "yx", Age = "年龄", var9 = "Alb"),
  relabel = c(yx = "亚型"),
  # 自定义因子水平：levels（顺序）、labels（标签）、ordered（是否有序）
  factor_levels = list(
    y = list(levels = c(1, 2), labels = c("Sruv", "Death")),  # 结局变量
    yx = list(levels = 1:5, labels = paste0("亚型", 1:5)),    # 亚型变量
    Gender = list(levels = c(1, 2), labels = c("Male", "Female"))  # 性别变量
  )
)
# 查看因子变量转换结果
str(dat.param5$data$yx)

# 示例6：在变量信息表中添加自定义标记列
dat.param6 <- super_param(
  data = df,
  rename_safe = "normal",
  key_vars = "ID",
  rename = c(yaxing = "yx", Age = "年龄", var9 = "Alb"),
  relabel = c(yx = "亚型"),
  factor_levels = list(
    y = list(levels = c(1, 2), labels = c("Sruv", "Death")),
    yx = list(levels = 1:5, labels = paste0("亚型", 1:5)),
    Gender = list(levels = c(1, 2), labels = c("Male", "Female"))
  ),
  # 添加标记列：dim（变量维度）和cont（是否连续变量）
  add_mark = list(
    dim = "ifelse(label \%in\% c('Age','Gender','亚型','Alb','Glo','AGR','Cr'), 1, 2)",
    cont = "dplyr::case_when(继承类型 == 'numeric' ~ 1, TRUE ~ 0)"
  )
)
# 查看带标记的变量信息表
dat.param6$Viewer$table

# 示例7：调整变量值展示的详细程度
dat.param7 <- super_param(
  data = df,
  rename_safe = "normal",
  key_vars = "ID",
  rename = c(yaxing = "yx", Age = "年龄", var9 = "Alb"),
  relabel = c(yx = "亚型"),
  factor_levels = list(
    y = list(levels = c(1, 2), labels = c("Sruv", "Death")),
    yx = list(levels = 1:5, labels = paste0("亚型", 1:5)),
    Gender = list(levels = c(1, 2), labels = c("Male", "Female"))
  ),
  add_mark = list(
    dim = "ifelse(label \%in\% c('Age','Gender','亚型','Alb','Glo','AGR','Cr'), 1, 2)",
    cont = "dplyr::case_when(继承类型 == 'numeric' ~ 1, TRUE ~ 0)"
  ),
  max_level = 10,       # 最多展示10个变量值水平
  max_level_pos = 20    # 变量值字符长度超过20时截断
)

# 示例8：结合外部配置表批量处理（类似SAS super_single逻辑）
# 假设已有配置表Super_Single和add_label_rename_format
if (exists("Super_Single") && exists("add_label_rename_format")) {
  dat.param8 <- super_param(
    data = df,
    rename_safe = "normal",
    # 从配置表提取重命名、标签和类型转换规则
    rename = setNames(Super_Single$variable, Super_Single$最终变量名),
    relabel = setNames(Super_Single$label, Super_Single$最终变量名),
    type_conv = setNames(ifelse(Super_Single$cont == 1, "numeric", "factor"),
                        Super_Single$最终变量名),
    # 从配置表转换因子水平列表
    factor_levels = Tj_factor_list(add_label_rename_format),
    # 批量添加标记列
    add_mark = list(
      dim = Super_Single$dim,
      normal = Super_Single$normal
    )
  )
}

# 保存处理结果
data.lib <- list(raw = df, super = dat.param7)
save(data.lib, file = "Super_param_result.rda")

}
\author{
开发团队:TjssnStat团队;\cr
联系方式:VX:Tongjissn;\cr
官方网址:\url{https://study.tjbbb.com};\cr
微信:Tongjissn;\cr
官方平台-公众号:统计碎碎念
}
