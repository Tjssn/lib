% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Main_Super_param.R
\name{super_paramtest}
\alias{super_paramtest}
\title{数据变量综合处理与信息管理工具}
\usage{
super_paramtest(
  data,
  retype = NULL,
  factor_levels = NULL,
  drop_cols = NULL,
  keep_cols = NULL,
  other_vars = NULL,
  rename = NULL,
  rename_safe = c("unicode_name", "normal_name", "original_name", "label"),
  relabel = NULL,
  add_mark = NULL,
  dynamic_sort = TRUE,
  max_level = 5,
  color_col_mark = NULL,
  max_level_pos = 30,
  excel_super = NULL,
  default_mark = NA,
  sort_mark = NULL
)
}
\arguments{
\item{data}{数据框(data.frame)，必填参数。待处理的原始数据集，包含需要进行清洗和转换的所有变量。}

\item{retype}{命名向量，可选参数。用于指定变量类型转换规则，格式为\code{c("最终变量名"="目标类型")}。
支持的目标类型包括："numeric"、"integer"、"factor"、"ordered"、"Date"、"character"、"logical"。
若指定的变量不存在，将在日志中提示警告；字符型强行转化为因子或数值变量时，会根据字符的unicode编码
对水平进行排序并从1开始计数因子水平。（替代原\code{type_conv}参数）}

\item{factor_levels}{列表，可选参数。用于自定义因子变量的水平设置，格式为\code{list("最终变量名"=list(levels=, labels=, ordered=, ref_levels=))}。
其中：
\itemize{
\item levels：必须项，指定水平顺序；
\item labels：可选项，水平标签（默认与levels一致）；
\item ordered：可选项，是否为有序因子（默认FALSE）；
\item ref_levels：可选项，指定参照水平（支持通过水平值或标签设置）。
辅助函数：
\item "Tj_to_factor_list2"可将相关数据文件转化为可输入的列表；
\item "fast_factor_same"可快速声明多个相同因子赋值的变量（详见对应函数帮助）。
}}

\item{drop_cols}{字符向量，可选参数。指定需要从数据中删除的变量名称（基于最终变量名），
格式为\code{c("最终变量名1", "最终变量名2")}。删除操作在类型转换和因子设置之后执行。
若与\code{keep_cols}同时设置，\code{keep_cols}优先。}

\item{keep_cols}{字符向量，可选参数。指定需要从数据中保留的变量名称（基于最终变量名），
格式为\code{c("最终变量名1", "最终变量名2")}。保留操作在类型转换和因子设置之后执行，
优先级高于\code{drop_cols}。}

\item{other_vars}{字符向量，可选参数。标记为关键变量的名称（基于\code{最终变量名}），在动态排序中
关键变量将优先展示在结果的最前面，可用于区分分析中需重点关注的变量。（替代原\code{key_vars}参数）}

\item{rename}{命名向量，可选参数。用于自定义变量重命名规则，格式为\code{c("旧最终变量名"="新最终变量名")}。
该操作将覆盖由\code{rename_safe}参数设置的初始最终变量名，重命名失败的变量会在日志中提示。}

\item{rename_safe}{字符向量，可选参数。指定最终变量名的初始格式，决定变量名的基础样式，各可选值及处理规则如下：
"normal_name"：保留中文及合法字符（a-zA-Z0-9_），将所有非法符号（如空格、标点、特殊字符等）转换为下划线；若多个非法符号相邻，仅保留一个下划线；最终变量名通过\code{make.unique}确保唯一性。
"unicode_name"：将中文及所有非法字符转换为Unicode编码（格式为"u+十六进制值"），仅保留a-zA-Z0-9_等合法字符；最终变量名通过\code{make.unique}确保唯一性，适合需跨系统兼容的场景。
"original_name"：完全保留原始变量名，不做任何转换；若包含非法符号（如空格、特殊字符等），可能导致后续模型运行时自动重命名或报错。
"label"：使用变量的标签（label）作为初始变量名，若标签不存在则默认使用原始变量名。
默认值为\code{c("unicode_name", "normal_name", "original_name", "label")}，\strong{建议优先使用"normal_name"}，兼顾可读性与兼容性。}

\item{relabel}{命名向量，可选参数。用于修改变量的标签信息，格式为\code{c("最终变量名"="新label")}。
标签主要用于变量信息表中的展示，不影响变量实际名称和数据处理。}

\item{add_mark}{列表，可选参数。用于在变量信息汇总表中添加自定义标记列，
格式为\verb{list(<标记列名1>=<标记规则1>, <标记列名2>=<标记规则2>)}，其中标记规则支持tidy的mutate语法。
若标记列包含"dim"，未匹配的变量将使用\code{default_mark}填充。}

\item{dynamic_sort}{逻辑型，可选参数。是否启用变量动态排序功能。若为TRUE（默认），
变量顺序为"关键变量(other_vars) > 经过修改的变量 > 其他变量"；若为FALSE，保持原始变量顺序。
若\code{sort_mark}已设置，则\code{dynamic_sort}自动失效。}

\item{max_level}{整数，可选参数。控制变量值展示的最大水平数量，超过该数量时仅显示前N个水平
并提示总数，默认值为5。}

\item{color_col_mark}{字符向量，可选参数。指定需要进行颜色标记的列名（基于变量信息汇总表），
函数会为该列的不同水平自动分配区分度良好的颜色，增强表格可读性。}

\item{max_level_pos}{整数，可选参数。控制变量值展示的最大字符长度，超过该长度将截断并添加"..."，
默认值为30。}

\item{excel_super}{列表，可选参数。用于导入Excel格式的批量处理配置表，格式为\code{list(var=..., format=...)}，其中：
\itemize{
\item var：包含"最终变量名"、"variable"（新变量名）、"label"、"cont"（类型标识：1=数值型，0=因子型）等列的数据框；
\item format：包含因子水平配置的辅助数据框。
若设置此参数，将自动解析配置表并覆盖\code{rename}、\code{relabel}、\code{retype}、\code{factor_levels}等参数的手动设置，
适合大规模变量的标准化处理。
}}

\item{default_mark}{可选参数。当\code{add_mark}中包含"dim"列且部分变量未匹配到标记规则时，
使用此值作为默认填充，默认值为NA。}

\item{sort_mark}{字符向量，可选参数。指定用于排序的变量名（基于处理后的数据集），
变量信息表将按指定变量的取值排序，优先级高于\code{dynamic_sort}。若指定变量不存在，将在日志中警告并使用默认排序。}
}
\value{
列表，包含以下核心组件：
\code{data}: 处理后的标准化数据集，变量按指定顺序排列；
\code{label_mapping}: 变量名映射表，包含original_name、normal_name、unicode_name、label等信息；
\code{var_info}: 变量信息列表，包括统计信息（总观测数、缺失值数量等）和类型信息（基础类型、继承类型等）；
\code{Viewer}: 包含格式化的变量信息汇总表，展示变量的各类属性和统计特征，支持颜色标记；
\code{cleaning_log}: 清洗过程的详细日志，记录每一步操作的结果和警告信息；
\code{stats}: 数据处理前后的统计对比，包括样本量、变量数、删除变量数等。
}
\description{
对输入数据框进行变量处理与管理，支持变量重命名、类型转换、因子水平设置、变量筛选（保留/删除）、
标签管理等功能，并可通过Excel配置表实现批量处理。生成详细的变量信息汇总表和清洗日志，
支持表格着色与动态排序，为后续数据分析提供标准化数据集，同时通过Viewer实时可视化处理结果，
方便数据质量评估与预处理流程追溯。
}
\details{
变量处理优先级：\cr
\enumerate{
\item 批量配置解析（\code{excel_super}）→ 2. 初始变量名生成（\code{rename_safe}）→ 3. 自定义重命名（\code{rename}）→ \cr
\item 标签修改（\code{relabel}）→ 5. 类型转换（\code{retype}）→ 6. 因子水平设置（\code{factor_levels}）→ \cr
\item 变量筛选（\code{keep_cols}优先于\code{drop_cols}）→ 8. 排序（\code{sort_mark}优先于\code{dynamic_sort}）。\cr
}

表格着色逻辑：通过\code{color_col_mark}指定列后，函数会为该列的每个唯一水平分配不同的色调，
增强不同类别间的视觉区分度，未指定时默认按变量类型（字符型/数值型/因子型）着色。

日志信息包含：各步骤操作结果、警告信息、错误原因等，便于追踪处理过程和排查问题。
}
\note{
建议在处理大型数据集前先进行测试，以评估函数性能；\cr
变量名若包含特殊字符，会被自动转换为安全格式，转换规则可通过\code{rename_safe}参数控制；\cr
因子水平设置时，请确保\code{levels}参数包含所有可能的值，否则会产生NA值；\cr
类型转换可能导致数据丢失（如字符型转数值型时的非数字值），请在日志中确认转换成功率。
}
\section{重要提示}{

\strong{⚠️} 函数执行过程会生成详细的清洗日志，记录变量处理的每一步操作、转换结果及潜在问题，
建议仔细查看日志信息以确保数据处理符合预期。参数间存在优先级关系（如\code{keep_cols}优先于\code{drop_cols}），
请留意参数间的相互影响。
}

\examples{
# 准备工作：加载数据和包
rm(list = ls()); gc()
library(Tjpackages)
data("df")  # 假设df为待处理的原始数据集

# 示例1：基础使用，查看数据处理结果
dat.param1 <- super_param(data = df)
# 查看处理后的数据和变量信息表
head(dat.param1$data)
dat.param1$Viewer$table

# 示例2：指定变量名规则并标记关键变量
dat.param2 <- super_param(
  data = df,
  rename_safe = "normal_name",  # 生成保留中文和合法字符的变量名
  other_vars = c("ID", "性别")  # 标记关键变量，优先展示
)

# 示例3：自定义重命名、标签与类型转换
dat.param3 <- super_param(
  data = df,
  rename_safe = "normal_name",
  other_vars = "ID",
  rename = c(yaxing = "yx", Age = "年龄", var9 = "Alb"),  # 自定义重命名
  relabel = c(yx = "亚型", 年龄 = "年龄(岁)"),  # 修改变量标签
  retype = c(年龄 = "numeric", yx = "factor")  # 类型转换
)

# 示例4：设置因子水平与参照组
dat.param4 <- super_param(
  data = df,
  rename_safe = "normal_name",
  other_vars = "ID",
  rename = c(yaxing = "yx", Age = "年龄", var9 = "Alb"),
  relabel = c(yx = "亚型", 年龄 = "年龄(岁)"),
  retype = c(年龄 = "numeric", yx = "factor", Gender = "factor"),
  # 自定义因子水平与参照组
  factor_levels = list(
    y = list(levels = c(1, 2), labels = c("存活", "死亡"), ref_levels = "存活"),
    yx = list(levels = 1:5, labels = paste0("亚型", 1:5), ordered = TRUE),
    Gender = list(levels = c(1, 2), labels = c("男", "女"), ref_levels = "男")
  )
)

# 示例5：变量筛选与排序
dat.param5 <- super_param(
  data = df,
  rename_safe = "normal_name",
  keep_cols = c("ID", "年龄", "yx", "Gender"),  # 仅保留指定变量
  sort_mark = "年龄"  # 按年龄排序
)

# 示例6：添加自定义标记列并启用颜色标记
dat.param6 <- super_param(
  data = df,
  rename_safe = "normal_name",
  other_vars = "ID",
  rename = c(yaxing = "yx", Age = "年龄", var9 = "Alb"),
  add_mark = list(
    数据类型 = "ifelse(基础类型 \%in\% c('integer','numeric'), '连续型', '分类型')",
    重要性 = "dplyr::case_when(最终变量名 \%in\% c('ID','年龄') ~ '高', TRUE ~ '中')"
  ),
  color_col_mark = "数据类型"  # 按数据类型着色
)

# 示例7：通过Excel配置表批量处理
# 假设已读取Excel配置表为list(var=Super_Single, format=add_label_rename_format)
if (exists("excel_config")) {  # excel_config为导入的配置表列表
  dat.param7 <- super_param(
    data = df,
    rename_safe = "normal_name",
    excel_super = excel_config,  # 批量配置优先于手动设置
    color_col_mark = "dim"  # 按dim列着色
  )
}

# 保存处理结果
data.lib <- list(raw = df, processed = dat.param6)
save(data.lib, file = "Super_param_result.rda")

}
\author{
开发团队:TjssnStat团队;\cr
联系方式:VX:Tongjissn;\cr
官方网址:\url{https://study.tjbbb.com};\cr
微信:Tongjissn;\cr
官方平台-公众号:统计碎碎念
}
